<snippet>
	<content><![CDATA[

/*
    ॐ
        JAI SHREE RAM

        Hare Krishna Hare Krishna Krishna Krishna Hare Hare
        Hare Rama Hare Rama Rama Rama Hare Hare
    
                                                ॐ
*/

//Written by Bhuwanesh Nainwal
#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

using namespace __gnu_pbds;
using namespace std;

typedef tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update>
pbds;



#define fast                ios_base::sync_with_stdio(false) , cin.tie(NULL) , cout.tie(NULL)
#define int                    long long int
#define vci                  vector<int>
#define vcvci                 vector<vector<int>>
#define vcpi                 vector<pair<int,int>>
#define vcs                    vector<string>
#define pb                  push_back
#define mpii                 map<int , int>
#define mpsi                 map<string , int>
#define mpci                 map<char , int>
#define umpii                 unordered_map<int , int>
#define umpsi                 unordered_map<string , int>
#define umpci                 unordered_map<char , int>
#define all(x)                auto it = x.begin() ; it != x.end() ; it++
#define vcc                  vector<char>
#define vcs                  vector<string>
#define prii                pair<int , int>
#define pris                pair<int , string>
#define prsi                pair<string , int>
#define prss                pair<string , string>
#define prcs                pair<char , string>
#define prsc                pair<string , char>
#define prcc                pair<char , char>
#define sti                    set<int>
#define stc                    set<char>
#define sts                    set<string>
#define pqmx                priority_queue<int>
#define pqmn                priority_queue<int , vi , greater<int>>
#define null                NULL
#define ff                    first
#define ss                  second
#define stb(x)                __builtin_popcount(x)
#define stbl(x)                __builtin_popcountll(x)
#define lzr(x)                __builtin_clz(x)
#define tzr(x)                    __builtin_ctz(x)
#define prc(x , y)          fixed << setprecision(y) << x
#define max3(a, b, c)       max(a, max(b, c))
#define max4(a, b, c, d)       max(max3(a, b, c) , d)

#define min3(a, b, c)       min(a, min(b, c))
#define min4(a, b, c, d)       min(min3(a, b, c) , d)
#define nl                 '\n'

using namespace std;

const int mod = 1e9 + 7;
const int INF = 1e9;
const int LINF = 1e18;
const int N = 1e4;
const int chkprc = 1e-9;  // Check for precision error in double


struct PHash{
  size_t operator()(const pair<int,int>&x)const{
    return hash<int>()(((int)x.first)^(((int)x.second)<<32));
  }
};

struct THash{
    size_t operator()(const tuple<int , int , int>&x) const{
        return get<0>(x) ^ std::get<1>(x) ^ std::get<2>(x);
    }
};

template<class T>void _print(T x){cerr<<x;}

template<class T , class V>void _print(pair<T , V> x){_print(x.ff) ; cerr << ':';_print(x.ss);}

template<class T>void _print(vector<T> &a){cerr << '[' << ' ';for(auto x : a){_print(x);cerr<<' ';}cerr << ']';}

template<class T>void _print(set<T> &a){cerr<<'['<<' ';for(auto x : a){_print(x);cerr<<' ';}cerr<<']';}

template<class T>void _print(set<T,greater<T>> &a){cerr << '[' << ' ';for(auto x : a){_print(x);cerr << ' ';}cerr<<']';}

template<class T>void _print(multiset<T> &a){cerr << '[' << ' ';for(auto x : a){_print(x);cerr<<' ';}cerr<<']';}

template<class T>void _print(multiset<T , greater<T>> &a){cerr << '[' << ' ';for(auto x : a){_print(x);cerr<<' ';}cerr<<']';}

template<class T>void _print(unordered_set<T> &a){cerr << '[' << ' ';for(auto x : a){_print(x);cerr << ' ';}cerr<<']';}

template<class T , class V>void _print(vector<pair<T , V>> &a){cerr << '[' << ' ';for(auto x : a){_print(x.ff);cerr<<":"; _print(x.ss);cerr<<' ';}cerr<<']';}

template <class T, class V> void _print(map <T, V> &a) {cerr << "[ "; for (auto i : a) {_print(i); cerr << " ";} cerr << "]";}

template <class T, class V> void _print(unordered_map <T, V , PHash> &a) {cerr << "[ "; for (auto i : a) {_print(i); cerr << " ";} cerr << "]";}

template <class T, class V> void _print(unordered_map <T, V> &a) {cerr << "[ "; for (auto i : a) {_print(i); cerr << " ";} cerr << "]";}

template <class T> void _print(vector<vector<T>> &a) {cerr << "[ "; for (auto i : a) {_print(i); cerr << " ";} cerr << "]";}


#ifndef ONLINE_JUDGE
#define debug(x) cerr << #x << "  "; _print(x); cerr << '\n';
#else // ONLINE_JUDGE
#define debug(x)
#endif


/*----------------------------------------------------------------------------------------------------------------------------*/

void solve()
{


}


void local()
{

#ifndef ONLINE_JUDGE
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
#endif // ONLINE_JUDGE

#ifndef ONLINE_JUDGE
    freopen("error.txt", "w", stderr);
#endif // ONLINE_JUDGE


}

int32_t main()
{

    fast;
    local();
    int T = 1;
    // cin>>T;

    while(T--)
    {
        solve();
    }

    return 0;
}]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>template</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
